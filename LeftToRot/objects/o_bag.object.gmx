<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Grid Data Structure

inventory = ds_grid_create(4, 4);   //Create a 4x4 grid data structure
ds_grid_clear(inventory, 0);        //Set each value in grid to 0

bagOpen = 0;                        //Used to determine if bag is open or not
                                    //Closed by default
equipSlot = 1;                      //Humming Bird in Equipment Slot at start

xCoordSelect = 5;                   //Initialized for inventory management
yCoordSelect = 5;                   //Initialized for inventory management
xCoordSelectBackup = 5;             //Initialized for inventory management
yCoordSelectBackup = 5;             //Initialized for inventory management
selectValue = 0;                    //Initialized for inventory management
slotSelected = 0;                   //Initialized for inventory management
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory Management
//view_xview + 864 + (32 * xCoord) *** Reference for formula
//view_yview + 448 + (32 * yCoord) *** Reference for formula

xCoordSelect = floor((mouse_x - (view_xview + 864)) / 32);
yCoordSelect = floor((mouse_y - (view_yview + 448)) / 32);

if((bagOpen == 1) &amp;&amp; (xCoordSelect &gt;= 0) &amp;&amp; (yCoordSelect &gt;= 0)) {                                          //If Bag is opened
    //Select from Bag
    if((xCoordSelect &lt; 4) &amp;&amp; (yCoordSelect &lt; 4) &amp;&amp; (slotSelected == 0)) {              //Mouse clicked on bagSlot
        selectValue = inventory[# xCoordSelect, yCoordSelect];
        xCoordSelectBackup = xCoordSelect;
        yCoordSelectBackup = yCoordSelect;
        slotSelected = 1;
    }

    //Select from Hand
    else if((xCoordSelect == 3) &amp;&amp; (yCoordSelect == 4) &amp;&amp; (slotSelected == 0)) {            //Mouse clicked on equipSlot
        selectValue = o_player.weapon;
        xCoordSelectBackup = xCoordSelect;
        yCoordSelectBackup = yCoordSelect;
        slotSelected = 1;
    }

    //Bag to Bag
    else if((xCoordSelect &lt; 4) &amp;&amp; (yCoordSelect &lt; 4) &amp;&amp; (xCoordSelectBackup &lt; 4) &amp;&amp; (yCoordSelectBackup &lt; 4) &amp;&amp; (slotSelected == 1)) {              //Mouse clicked on bagSlot
        switchValue = inventory[# xCoordSelect, yCoordSelect];
        inventory[# xCoordSelect, yCoordSelect] = selectValue;
        inventory[# xCoordSelectBackup, yCoordSelectBackup] = switchValue;
        slotSelected = 0;
    }

    //Hand to Bag
    else if((xCoordSelect &lt; 4) &amp;&amp; (yCoordSelect &lt; 4) &amp;&amp; (xCoordSelectBackup == 3) &amp;&amp; (yCoordSelectBackup == 4) &amp;&amp; (slotSelected == 1)) {            //Mouse clicked on equipSlot
        switchValue = inventory[# xCoordSelect, yCoordSelect];
        inventory[# xCoordSelect, yCoordSelect] = selectValue;
        o_player.weapon = switchValue;
        slotSelected = 0;
    }

    //Bag to Hand
    else if((xCoordSelect == 3) &amp;&amp; (yCoordSelect == 4) &amp;&amp; (xCoordSelectBackup &lt; 4) &amp;&amp; (yCoordSelectBackup &lt; 4) &amp;&amp; (slotSelected == 1)) {            //Mouse clicked on equipSlot
        switchValue = o_player.weapon;
        o_player.weapon = selectValue;
        inventory[# xCoordSelectBackup, yCoordSelectBackup] = switchValue;
        slotSelected = 0;
    }

    //Hand or Bag to nothing or Hand to Hand
    else {
        slotSelected = 0;
    }
} // Bag opened Bracket
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw 16 Slot Bag and equipSlot

//scr_drawBag();  //run script "scr_drawBag"
//draw equipSlot
if((xCoordSelect == 3) &amp;&amp; (yCoordSelect == 4)) {        //Mouse clicked on equipSlot
    draw_sprite(s_selectSlot, 0, view_xview + 960, view_yview + 576);
}

else {
    draw_sprite(s_equipSlot, 0, view_xview + 960, view_yview + 576);
}

//These if statements control which weapon icon appears in the equipSlot.
if(o_player.weapon == 1) {
    draw_sprite(s_hummingBirdIcon, 0, view_xview + 968, view_yview + 584);
}

else if (o_player.weapon == 2) {
    draw_sprite(s_beowulfIcon, 0, view_xview + 960, view_yview + 576);
}

else if (o_player.weapon == 3) {
    draw_sprite(s_clipperIcon, 0, view_xview + 960, view_yview + 576);
}

else if (o_player.weapon == 4) {
    draw_sprite(s_vindicatorBladeCannon, 0, view_xview + 960, view_yview + 576);
}

//This draws the bag if it is open.
if(bagOpen == 1) {
    var xCoord = 0;                                         //The visual column of the bag
    var yCoord = 0;                                         //The visual row of the bag
    for(yCoord = 0; yCoord &lt; 4; yCoord++) {                 //For four rows
        for(xCoord = 0; xCoord &lt; 4; xCoord++) {             //For four columns
            if((xCoordSelect == xCoord) &amp;&amp; (yCoordSelect == yCoord)) {  //Mouse clicked on bagSlot
                draw_sprite(s_selectSlot, 0, view_xview + 864 + (32 * xCoord), view_yview + 448 + (32 * yCoord));
            }
            
            else {
                draw_sprite(s_itemSlot, 0,                  //Draw our empty item slot.
                        view_xview + 864 + (32 * xCoord),   //This will create 16 item
                        view_yview + 448 + (32 * yCoord)    //slots. Legal to use multiple
                        );                                  //lines for the statement but
            }                                               //it's usually hard to read.
            
            //Shitty version of drawing items in a bag.
            //Checks the number in the bag. If it's not
            //0, it should draw one of the weapons.
            //Limited to only the items in this check.                                                
            if(inventory[# xCoord, yCoord] == 1) {
                draw_sprite(s_hummingBirdIcon, 0, view_xview + 872 + (32 * xCoord), view_yview + 456 + (32 * yCoord));
            }

            else if (inventory[# xCoord, yCoord] == 2) {
                draw_sprite(s_beowulfIcon, 0, view_xview + 864 + (32 * xCoord), view_yview + 448 + (32 * yCoord));
            }

            else if (inventory[# xCoord, yCoord] == 3) {
                draw_sprite(s_clipperIcon, 0, view_xview + 864 + (32 * xCoord), view_yview + 448 + (32 * yCoord));
            }

            else if (inventory[# xCoord, yCoord] == 4) {
                draw_sprite(s_vindicatorBladeCannon, 0, view_xview + 864 + (32 * xCoord), view_yview + 448 + (32 * yCoord));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shows or Hides Bag

//Referencing Equipment Slot (equipSlot)
//draw_sprite(s_equipSlot, 0, view_xview + 992, view_yview + 608)
//Final Slot should be 992, 576
//First Slot should be 896, 480

if(bagOpen == 0) {                                          //If Bag is closed...
    bagOpen = 1;                                            //Bag is now open.
}

else {                                                      //...The Bag is open
    bagOpen = 0;                                            //Close the bag.
}                                                           //Hopefully this works...
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
